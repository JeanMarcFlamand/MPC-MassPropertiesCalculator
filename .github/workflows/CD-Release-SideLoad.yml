# If you are looking for guidance for your builds, see https://github.com/microsoft/github-actions-for-desktop-apps
name: CD Release Console Demo App (sideload)

on:
  push:
    branches:
      - CodeSignOnHold
    paths:
      - "src/**/*"
      - ".github/workflows/CD-Release-SideLoad.yml"
env:
  SolutionPath: MPC-MassPropertiesCalculatorApp.sln
  WappProjectPath: MPC-MassPropertiesCalculator.Installer/MPC-MassPropertiesCalculator.Installer.wapproj
  WpfProjectPath: MPC-MassPropertiesCalculator/MPC-MassPropertiesCalculator.csproj
  # NugetConfigPath: src\nuget.config
  RID: win-x64
  TargetPlatform: "x64"
  UwpBundlePlatform: "x64"
  Configuration: Release
  # AppxPackageDir: 'D:\a\MediaFileManager\MediaFileManager\src\MediaFileManager\PackageProject\SideLoadPackages\'
  AppxPackageDir: 'D:\a\PackageProject\SideLoadPackages\'
  AppxBundle: Always
  AppxPackageSigningEnabled: True
  GenerateAppInstallerFile: True
  BuildMode: SideloadOnly
  # AppInstUri: 'https://dvlup.blob.core.windows.net/general-app-files/Installers/MediaFileManager/'
  AppInstUri: 'https://github.com/JeanMarcFlamand/MPC-MassPropertiesCalculator/releases/Desktop.Console-Installer'
  SigningCertificate: JeanMarcFlamand.pfx
  WapProjectDirectory: '\PackageProject'
  
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # ******************| ASSEMBLY AND MANIFEST VERSIONING |********************* #
    
    # Create my own version number with a specific format using date. ex: 2020.805.1.0
    - uses: Amadevus/pwsh-script@v2
      id: version-creator
      with:
        script: |
          $buildDay = Get-Date -Format "yyyy.Mdd"
          $runNum = $env:GITHUB_RUN_NUMBER # Default environment variables
          $ver = "$buildDay" + "." + "$runNum" + ".0"
          echo $ver
          Set-ActionVariable APP_VERSION $ver

    # Update the appxmanifest for SideLoad (and signing with PFX)
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content "MPC-MassPropertiesCalculator.Installer\Package.appxmanifest"
        $manifest.Package.Identity.Version = $env:APP_VERSION
        $manifest.Package.Identity.Name = "61469LanceLotSoftware.MediaFileManager"
        # was $manifest.Package.Identity.Publisher = 'CN="Jean-Marc Flamand, LLC", O="7JTFCode", S="Quebec", C="CA"'
        $manifest.Package.Identity.Publisher = 'CN="Jean-Marc Flamand", O="Jean-Marc Flamand", S="Quebec", C="CA"'
        $manifest.Package.Properties.DisplayName = "MPC-MassPropertiesCalculator"
        $manifest.Package.Properties.PublisherDisplayName = "7JTFCode"
        $manifest.Package.Applications.Application.VisualElements.DisplayName = "MPC-MassPropertiesCalculator"
        $manifest.save("MPC-MassPropertiesCalculator.Installer\Package.appxmanifest")
        
    # Updates the WPF project's assembly version number.
    #- name: Update WPF Assembly version
    #  run: |
    #    function SetAssemblyFileVersion([string]$pathToFile, [string]$newVersion) {
    #      $newFile = Get-Content $pathToFile -encoding "UTF8" | foreach-object {
    #        if ($_.StartsWith("[assembly: AssemblyFileVersion")) {
    #          $verStart = $_.IndexOf("(")
    #          $verEnd = $_.IndexOf(")", $verStart)
    #          $origVersion = $_.SubString($verStart+2, $verEnd-$verStart-3)
    #          $newVersion = "$env:APP_VERSION"
    #          write-host "Setting AssemblyFileVersion from $origVersion to $newVersion"
    #          $_.Replace($origVersion, $newVersion)
    #        }  else {
    #          $_
    #        }
    #      }
    #      $newfile | Set-Content $assemblyInfoPath -encoding "UTF8"
    #    }
        # $assemblyInfoPath = "MPC-MassPropertiesCalculator\Properties\AssemblyInfo.cs"
     #   $assemblyInfoPath = "MPC-MassPropertiesCalculator\obj\x64\Release\net6.0\MPC-MassPropertiesCalculator.AssemblyInfo.cs"
     #   SetAssemblyFileVersion $assemblyInfoPath $env:APP_VERSION


    # ******************| TOOL INSTALL and DEPENDENCY RESTORE |********************* #
    
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'
    
    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Use dotnet restore command for the solution (see RIDs https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)
    #- name: DotNet Restore - solution
    #  run: dotnet restore ${{ env.SolutionPath }} --configfile ${{ env.NugetConfigPath }} --runtime "${{ env.RID }}"
    #  env:
    #    TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
    #    TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}
    
    # In order to generate project.assets.json, we need to use nuget.exe for the wapproject
    #- name: NuGet Restore - Wapp Project (to ensure assets.json is available)
    #  run: nuget restore ${{ env.WappProjectPath }} -ConfigFile ${{ env.NugetConfigPath }}
    #  env:
    #    NuGetConfig_Path: src\nuget.config
    #    TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
    #    TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}

    # Restore NuGet packages using the nuget config (package sources authenticate using environment variable and nuget.config)
    #- name: NuGet Restore - Solution
    #  run: dotnet restore ${{ env.SolutionPath }} --configfile=${{ env.NuGetConfigPath }} --runtime ${{ env.RID }}
    #  env:
    #    TELERIK_USERNAME: ${{ secrets.TELERIK_USERNAME }}
    #    TELERIK_PASSWORD: ${{ secrets.TELERIK_PASSWORD }}

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild ${{ env.WpfProjectPath }} /t:Restore /p:Configuration=${{ env.Configuration }} /p:RuntimeIdentifier="${{ env.RID }}" /p:Platform="${{ env.TargetPlatform}}"


    # ************************| BUILD AND DISTRIBUTION |************************ #

    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath "MPC-MassPropertiesCalculator.Installer" -AdditionalChildPath "${{ env.SigningCertificate }}"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    # Build using SideLoad and AppInstaller instructions (requires code signing)
    - name: Build wapproj for Sideloading
      run: msbuild ${{ env.SolutionPath }} /p:GenerateAppInstallerFile=${{ env.GenerateAppInstallerFile }} /p:AppInstallerUri=${{ env.AppInstUri }} /p:HoursBetweenUpdateChecks=6 /p:AppxPackageDir=${{ env.AppxPackageDir }} /p:Platform=${{ env.UwpBundlePlatform }} /p:Configuration=${{ env.Configuration }} /p:UapAppxPackageBuildMode=${{ env.BuildMode }} /p:AppxBundle=${{ env.AppxBundle }} /p:PackageCertificateKeyFile=${{ env.SigningCertificate }} /p:PackageCertificatePassword=${{ env.CertPrivateKey }} /p:PackageCertificateThumbprint=${{ env.CertThumbprint }} /p:AppxPackageSigningEnabled=${{ env.AppxPackageSigningEnabled }}
      env:
        CertPrivateKey: ${{ secrets.PFX_KEY }}
        CertThumbprint: ${{ secrets.PackageCertificateThumbprint }}
      
    # UPLOAD TO AZURE STORAGE BLOB
    # This automatically distributes the sideLoad package, which users can visit the index.html page and run the appinstaller
    #- name: Uploading appInstaller to Azure Blob
    #  id: sideload-blob-upload
    #  uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
    #  with:
    #    connection_string: "${{ secrets.AZURE_DVLUP_BLOB_CONNECTION_STRING }}"
    #    container_name: general-app-files
    #    source_folder: src\MediaFileManager\PackageProject\SideLoadPackages\
    #    destination_folder: Installers/MediaFileManager
    #    clean_destination_folder: true
    #    is_recursive: true

    # ZIP up the sideload packages for GitHub release using Powershell
    - name: Create SideLoadPackages.zip
      run: Compress-Archive -Path 'D:\a\MPC-MassPropertiesCalculator\PackageProject\SideLoadPackages\*' -DestinationPath 'D:\a\MPC-MassPropertiesCalculator\PackageProject\SideLoadPackages\SideLoadPackages.zip'

    # Remove the .pfx now that we're done with code signing
    - name: Remove the .pfx
      run: Remove-Item -path "${{ env.WapProjectDirectory }}\${{ env.SigningCertificate }}"

    # ************************| GITHUB RELEASE |************************ #

    # Create a new GitHub Release tagged with the build version number (via https://github.com/actions/create-release)
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v.${{ env.APP_VERSION }}"
        release_name: "MPC-MassPropertiesCalculator v.${{ env.APP_VERSION }}"
        draft: false
        prerelease: false
        body_path: .github\other\preview_releasebody.md

    # Add SideLoad artifacts to GitHub Release (via https://github.com/actions/upload-release-asset)
    - name: Uploading SideLoad Release asset
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: 'D:\a\MPC-MassPropertiesCalculator\PackageProject\SideLoadPackages\SideLoadPackages.zip'
        asset_name: SideLoadPackages.zip
        asset_content_type: application/zip