# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name: NET 6.0 CI

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      -[MSIX-Installer]  # was master

jobs:

  build:
    # since MSIX cam bundle all target platforms, we don't need a matrix to build multiple TFMs
    strategy:
      matrix:
        targetplatform: [x64] # was [x86, x64]

    runs-on: windows-2022

    env:
      App_Packages_Directory: AppPackages
      Signing_Certificate: GitHubActionsDemo.pfx
      Solution_Path: MPC-MassPropertiesCalculatorApp.sln
      # Test_Project_Path: MPC-MassPropertiesCalculatorApp.Tests\MPC-MassPropertiesCalculatorApp.Tests.csproj
      Wpf_Project_Path: MPC-MassPropertiesCalculator\MPC-MassPropertiesCalculator.csproj
      Appxmanifest_Path: MPC-MassPropertiesCalculator.Installer\Package.appxmanifest
      #Wap_Project_Directory: ConsoleDemo.Installer
      #Wap_Project_Name: ConsoleDemo.Installer.wapproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPath and SetEnv commands

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.4.0
      with:
        setAllVars: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.0" # was "6.0.x"

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1

    # Update the version before build
    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\${{ env.Appxmanifest_Path }}"
        $manifest.Package.Identity.Version = "$env:NBGV_SimpleVersion.0"
        $manifest.save(".\${{ env.Appxmanifest_Path }}")

    - name: .NET Restore
      run: dotnet restore ${{ env.Solution_Path }} --runtime $env:RuntimeIdentifier
      env:
        RuntimeIdentifier: win-x64

    # Test
    # - name: Execute Unit Tests
    #- name: Execute Unit Tests
    #  run: dotnet test ${{ env.Test_Project_Path }}

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild ${{ env.Solution_Path }} /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-x64
        
    # Not used in a single-project msix scenario
    #- name: NuGet Restore Wapp Project
    #  run: nuget restore ${{ env.Wap_Project_Path }}
    
    # Decode the Base64 encoded Pfx
    - name: Decode the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath ${{ env.Signing_Certificate }}
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build and create MSIX package
    - name: Build the WPF project in MSIX package mode
      run: msbuild ${{ env.Solution_Path }} /p:Platform=$env:TargetPlatform /p:RuntimeIdentifier=$env:RuntimeIdentifier /p:Configuration=$env:Configuration /p:AppxBundlePlatforms=$env:Appx_Bundle_Platforms /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:AppxPackageDir="$env:AppxPackageDir" /p:GenerateAppxPackageOnBuild=$env:GenerateAppPackage /p:AppxPackageSigningEnabled=$env:SigningEnabled /p:PackageCertificateKeyFile=${{ env.Signing_Certificate }} /p:PackageCertificatePassword=${{ secrets.Pfx_Key }} 
      env:
        AppxBundle: Never
        BuildMode: SideloadOnly
        AppxPackageDir: ${{ env.GITHUB_ACTION_PATH }}\${{ env.App_Packages_Directory }}
        Configuration: Release
        TargetPlatform: x64
        RuntimeIdentifier: win-x64
        AppxBundlePlatforms: x86|x64   # |arm|arm64
        SigningEnabled: false
        GenerateAppPackage: false

    # Remove the .pfx
    - name: Remove the .pfx
      run: Remove-Item -path ${{ env.Signing_Certificate }}
    
    # Can be replaced with a single search for *.msixbundle file
    # - name: Find MSIX files
    #   id: gather
    #   shell: pwsh
    #   run: |
    #     $currentDirectory = Get-Location
    #     $msixFiles = Get-ChildItem -Path $currentDirectory -Recurse -Include *.msixbundle

    #     $count = $msixFiles.count

    #     if($count -gt 0){
    #       echo "Discovered $count MSIX files"
    #     } else {
    #       echo "There were NO MSIX files in the source folder."
    #       exit 1
    #     }
        
    #     $tempMsixFolder = Join-Path -Path $currentDirectory -ChildPath "MsixFiles\"
    #     New-Item -Path $tempMsixFolder -ItemType Directory -Force

    #     $msixFiles | ForEach-Object {
    #       Copy-Item -Path $_ -Destination $tempMsixFolder
    #       echo "Successfully copied $_ to $tempMsixFolder"
    #     }

    #     echo "::set-output name=msix_folderpath::$tempMsixFolder"
        

    # Not needed for debug builds because we do not build msix packages or bundle them
    # - name: compress artifacts
    #   run: Compress-Archive -Path ${{ env.GITHUB_ACTION_PATH }}\${{ env.App_Packages_Directory }}\* -DestinationPath ${{ env.GITHUB_ACTION_PATH }}\${{ env.App_Packages_Directory }}\BuildArtifacts.zip

    # # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: BuildArtifacts
    #     path: ${{ env.GITHUB_ACTION_PATH }}\${{ env.App_Packages_Directory }}\BuildArtifacts.zip
